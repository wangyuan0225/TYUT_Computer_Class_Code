/**
  ****************************************************************************************
  * Copyright © Taiyuan University of Technology. Ltd. 1902-2024. All rights reserved.
  * @BelongsProject : LQ
  * @File           : 3492.cpp
  * @Author         : yuan wang (wy0225)
  * @Brief          : 小蓝现在有一个长度为100的数组，数组中的每个元素的值都在0到9的范围之内。数组中的元素
  *                     从左至右如下所示：现在他想要从这个数组中寻找一些满足以下条件的子序列：1.子序列的
  *                     长度为 8; 2.这个子序列可以按照下标顺序组成一个 yyyymmdd 格式的日期，并且要求这
  *                     个日期是2023年中的某一天的日期，例如20230902，20231223。yyyy表示年份，mm表示
  *                     月份，dd表示天数，当月份或者天数的长度只有一位时需要一个前导零补充。请你帮小蓝计
  *                     算下按上述条件一共能找到多少个不同的2023年的日期。对于相同的日期你只需要统计一次即可
  * @Attention      : 这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只
  *                     填写这个整数，填写多余的内容将无法得分。
  * @Date           : 2024/3/13 21:18
  * @Version        : 1.0
  ****************************************************************************************
  */

#include <iostream>

using namespace std;

int main() {
    int num[100] = {5, 6, 8, 6, 9, 1, 6, 1, 2, 4, 9, 1, 9,
                    8, 2, 3, 6, 4, 7, 7, 5, 9, 5, 0, 3,
                    8, 7, 5, 8, 1, 5, 0, 6, 1, 8, 3, 0,
                    3, 7, 9, 2, 7, 0, 5, 8, 8, 5, 7, 0,
                    9, 9, 1, 9, 4, 4, 6, 8, 6, 3, 3, 8,
                    5, 1, 6, 3, 4, 6, 7, 0, 7, 8, 2, 7,
                    6, 8, 9, 5, 6, 5, 6, 1, 4, 0, 1, 0,
                    0, 9, 4, 8, 0, 9, 1, 2, 8, 5, 0, 2,
                    5, 3, 3};

    int ans = 0;
    int day[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    for (int i = 1; i <= 12; ++i) {
        for (int j = 1; j <= day[i - 1]; ++j) {
            int stand[8] = {2, 0, 2, 3, i / 10, i % 10, j / 10, j % 10};
            int l = 0, sum = 0;
            for (int k = 0; k < 100; ++k) {
                if (num[k] == stand[l]) {
                    sum++;
                    l++;
                }
                if (sum == 8) {
                    ans++;
                    break;
                }
            }
        }
    }

    cout << ans << endl;

    return 0;
}
